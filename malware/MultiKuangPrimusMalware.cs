using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using dotnet_cyberpunk_challenge_3_14.malware.lib;
using dotnet_cyberpunk_challenge_3_14.malware.lib._lib;

namespace dotnet_cyberpunk_challenge_3_14.malware
{
    public class MultiKuangPrimusMalware<T, Z> : MultiKuangDaemonFamilyBase<T, Z>
        where T : MessageRoot
        where Z : ProcessList
    {
        public async override Task<string> GetIceTypeOnRemote()
        {
            T messageResponse = await CurrentServerConnection.SendRequest("model-type");
            string modelType = "";
            
            if (typeof(T) == typeof(MilitechMessageRoot)) {
                modelType = (messageResponse as MilitechMessageRoot).connection.model;
            } else if (typeof(T) == typeof(ArasakaMessageRoot)) {
                modelType = (messageResponse as ArasakaMessageRoot).content.model;
            } else {
                throw new NotImplementedException();
            }

            string matchedModel = "";
            if (_IsTargetHatichiICE(modelType)){
                matchedModel = "hatachi";
            } else if (_IsTargetHosakaICE(modelType)) {
                matchedModel ="hosaka";
            } else if (_IsTargetKiroshiICE(modelType)) {
                matchedModel = "kiroshi";
            } else {
                matchedModel = "unknown";
            }

            return matchedModel; 
        }

        public async override Task<IEnumerable<string>> GetProcessMemoryMapping()
        {
            List<Z> messageProcessLists = await GetProcessList();
            return messageProcessLists.Select(pl => pl.memoryStartingAddress);
        }

        protected async override Task<List<Z>> _GetProcessList() {
            T message = await CurrentServerConnection.SendRequest("process-list");
            if (typeof(Z) == typeof(MilitechICEProcessList)) {
                List<MilitechICEProcessList> processList = (message as MilitechMessageRoot).connection.processList;
                return processList as List<Z>;
            } else if (typeof(Z) == typeof(ArasakaMessageProcessList)) {
                List<ArasakaMessageProcessList> processList = (message as ArasakaMessageRoot).content.processList;
                return processList as List<Z>;
            } else if (typeof(Z) == typeof(BiotechnicaProcessList)) {
                List<BiotechnicaProcessList> processList = (message as BiotechnicaMessageRoot).system.processList;
                return processList as List<Z>;
            } else {
                throw new NotImplementedException();
            }

        }

        public override void IceBreak()
        {
            throw new NotImplementedException();
        }

        public async override Task Initialize()
        {
            await GetCurrentConnection();
        }

        public async override Task SetupIceBreakerTunnelToTarget()
        {
            CurrentIceBreakerTunnelConnection = new IceBreakerTunnelConnection<T>();
            await CurrentIceBreakerTunnelConnection.Initialize();
        }
    }
}